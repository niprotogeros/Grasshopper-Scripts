# GhPython (IronPython 2.7) - Component 3: UDI/sDA/ASE METRICS READER

import os, json

# ==============================================================================
# --- GRASSHOPPER COMPONENT DOCUMENTATION ---
# ==============================================================================
ghenv.Component.Description = (
    "This component reads the JSON results file created by the Runner.\n\n"
    "It extracts and processes the standard daylight metrics: "
    "Useful Daylight Illuminance (UDI), Spatial Daylight Autonomy (sDA), "
    "and Annual Sun Exposure (ASE)."
)

# Set input descriptions
try:
    ghenv.Component.Params.Input[0].Description = "File path to the 'daylight_summary.json' file generated by the Runner component."
    ghenv.Component.Params.Input[1].Description = "The list of Ladybug grid names corresponding to the rooms. Must be in the same order."
except: pass

# Set output descriptions
try:
    ghenv.Component.Params.Output[0].Description = "A summary message for the UDI/sDA/ASE reader."
    ghenv.Component.Params.Output[1].Description = "Spatial Daylight Autonomy (sDA 300/50%): Percentage of area receiving at least 300 lux for 50% of occupied hours."
    ghenv.Component.Params.Output[2].Description = "Annual Sun Exposure (ASE 1000/250h): Percentage of area receiving over 1000 lux for more than 250 hours."
    ghenv.Component.Params.Output[3].Description = "UDI-Fallen (Hours): Hours the spatial average illuminance is below 100 lux."
    ghenv.Component.Params.Output[4].Description = "UDI-Supplementary (Hours): Hours the spatial average is between 100 and the UDI minimum lux."
    ghenv.Component.Params.Output[5].Description = "UDI-Autonomous (Hours): Hours the spatial average is between the UDI minimum and 3000 lux."
    ghenv.Component.Params.Output[6].Description = "UDI-Exceeded (Hours): Hours the spatial average is above 3000 lux."
    ghenv.Component.Params.Output[7].Description = "UDI-Fallen (%): Percentage of occupied hours the spatial average illuminance is below 100 lux."
    ghenv.Component.Params.Output[8].Description = "UDI-Supplementary (%): Percentage of hours between 100 and the UDI minimum lux."
    ghenv.Component.Params.Output[9].Description = "UDI-Autonomous (%): Percentage of hours between the UDI minimum and 3000 lux."
    ghenv.Component.Params.Output[10].Description = "UDI-Exceeded (%): Percentage of hours above 3000 lux."
except: pass

# ==============================================================================
# --- SCRIPT LOGIC ---
# ==============================================================================
def clean_lb_name(raw_name):
    if not isinstance(raw_name, str): return ""
    name = raw_name.replace("SensorGrid: ", "").lstrip()
    return name.rsplit(' [', 1)[0].rstrip().replace(' ', '_')

message = "Connect 'json_file_path' and 'grid_names'."
if grid_names:
    num = len(grid_names)
    sDA_pct, ASE_pct = [None] * num, [None] * num
    udi_f_hr, udi_s_hr, udi_a_hr, udi_e_hr = [None]*num, [None]*num, [None]*num, [None]*num
    udi_f_pct, udi_s_pct, udi_a_pct, udi_e_pct = [None]*num, [None]*num, [None]*num, [None]*num
else:
    sDA_pct, ASE_pct = [],[]
    udi_f_hr, udi_s_hr, udi_a_hr, udi_e_hr = [],[],[],[]
    udi_f_pct, udi_s_pct, udi_a_pct, udi_e_pct = [],[],[],[]
    
if json_file_path and os.path.exists(json_file_path):
    try:
        with open(json_file_path, 'r') as f: data = json.load(f)
        results = {r.get("room_label"): r for r in data.get("rooms", [])}
        
        if not results:
            message = "[ERROR] No room data in JSON file."
        else:
            matches = 0
            for i, name in enumerate(grid_names):
                clean_name = clean_lb_name(name)
                res = results.get(clean_name)
                if res:
                    matches += 1
                    sDA_pct[i] = res.get("sDA_300_50_pct")
                    ASE_pct[i] = res.get("ASE_1000_250_pct")
                    udi_f_hr[i], udi_s_hr[i] = res.get("udi_f_hours (<100lx)"), res.get("udi_s_hours (100-min)")
                    udi_a_hr[i], udi_e_hr[i] = res.get("udi_a_hours (min-3000lx)"), res.get("udi_e_hours (>3000lx)")
                    udi_f_pct[i], udi_s_pct[i] = res.get("udi_f_pct (<100lx)"), res.get("udi_s_pct (100-min)")
                    udi_a_pct[i], udi_e_pct[i] = res.get("udi_a_pct (min-3000lx)"), res.get("udi_e_pct (>3000lx)")
                else:
                    sDA_pct[i], ASE_pct[i] = 0, 0
            message = "[SUCCESS] Metrics: Read {} inputs, found {} matches.".format(len(grid_names), matches)
    except Exception as e:
        message = "[ERROR] Failed to read JSON:\n" + str(e)
elif json_file_path:
    message = "[WARNING] JSON file not found at the given path."