# GhPython (IronPython 2.7) - Component 2: BREEAM RESULTS READER

import os, json
import System.Drawing.Color as Color
from System import Array
import Rhino.Geometry as rg

# ==============================================================================
# --- GRASSHOPPER COMPONENT DOCUMENTATION ---
# ==============================================================================
ghenv.Component.Description = (
    "This component reads the JSON results file created by the Runner.\n\n"
    "It specifically extracts and processes all BREEAM-related metrics for each room. "
    "It also visualizes the pass/fail status of each analysis grid by coloring the meshes."
)

# Set input descriptions
try:
    ghenv.Component.Params.Input[0].Description = "File path to the 'daylight_summary.json' file generated by the Runner component."
    ghenv.Component.Params.Input[1].Description = "The list of analysis grid meshes for visualization."
    ghenv.Component.Params.Input[2].Description = "The list of Ladybug grid names corresponding to the meshes. Must be in the same order."
except: pass

# Set output descriptions
try:
    ghenv.Component.Params.Output[0].Description = "A summary message for the BREEAM reader."
    ghenv.Component.Params.Output[1].Description = "True if the entire building passes the BREEAM criteria."
    ghenv.Component.Params.Output[2].Description = "The name of the room with the worst BREEAM performance."
    ghenv.Component.Params.Output[3].Description = "The cleaned room names used for matching results."
    ghenv.Component.Params.Output[4].Description = "List of pass/fail (True/False) status for the MINIMUM illuminance criterion for each room."
    ghenv.Component.Params.Output[5].Description = "List of pass/fail (True/False) status for the AVERAGE illuminance criterion for each room."
    ghenv.Component.Params.Output[6].Description = "List of overall pass/fail (True/False) status for each room."
    ghenv.Component.Params.Output[7].Description = "The minimum hours achieved by any point in each room."
    ghenv.Component.Params.Output[8].Description = "The percentage of area meeting the minimum criterion for each room."
    ghenv.Component.Params.Output[9].Description = "The number of hours the spatial average was met for each room."
    ghenv.Component.Params.Output[10].Description = "The percentage of area meeting the average criterion for each room."
    ghenv.Component.Params.Output[11].Description = "Meshes colored green for pass and red for fail based on the MINIMUM illuminance criterion."
    ghenv.Component.Params.Output[12].Description = "Meshes colored green for pass and red for fail based on the AVERAGE illuminance criterion."
except: pass

# ==============================================================================
# --- SCRIPT LOGIC ---
# ==============================================================================
def color_mesh(mesh, color):
    if not mesh: return None
    colored_mesh = mesh.Duplicate()
    colored_mesh.VertexColors.SetColors(Array[Color]([color] * colored_mesh.Vertices.Count))
    return colored_mesh

def clean_lb_name(raw_name):
    if not isinstance(raw_name, str): return ""
    name = raw_name.replace("SensorGrid: ", "").lstrip()
    return name.rsplit(' [', 1)[0].rstrip().replace(' ', '_')

PASS_COLOR, FAIL_COLOR = Color.FromArgb(50, 205, 50), Color.FromArgb(220, 20, 60)
message, building_pass, worst_room = "Connect 'json_file_path'.", False, "N/A"
# Initialize outputs based on inputs
if grid_meshes:
    num = len(grid_meshes)
    room_labels, room_min_pass, room_avg_pass, room_pass = [None]*num, [None]*num, [None]*num, [None]*num
    room_min_hours, min_area_pct, room_avg_hours, avg_area_pct = [None]*num, [None]*num, [None]*num, [None]*num
    colored_min_meshes, colored_avg_meshes = [None]*num, [None]*num
else:
    room_labels, room_min_pass, room_avg_pass, room_pass = [],[],[],[]
    room_min_hours, min_area_pct, room_avg_hours, avg_area_pct = [],[],[],[]
    colored_min_meshes, colored_avg_meshes = [],[]

if json_file_path and os.path.exists(json_file_path):
    try:
        with open(json_file_path, 'r') as f: data = json.load(f)
        summary = data.get("summary", {}); building_pass = summary.get("overall_building_pass"); worst_room = summary.get("overall_worst_room_label")
        results = {r.get("room_label"): r for r in data.get("rooms", [])}
        if results:
            matches = 0
            for i, mesh in enumerate(grid_meshes):
                name = clean_lb_name(grid_names[i]); room_labels[i] = name
                res = results.get(name)
                if res:
                    matches += 1
                    min_p, avg_p = res.get("min_pass"), res.get("avg_pass")
                    room_min_pass[i], room_avg_pass[i], room_pass[i] = min_p, avg_p, res.get("room_pass")
                    room_min_hours[i], min_area_pct[i] = res.get("min_hours_achieved"), res.get("min_area_pct")
                    room_avg_hours[i], avg_area_pct[i] = res.get("avg_hours_achieved"), res.get("avg_area_pct")
                    colored_min_meshes[i] = color_mesh(mesh, PASS_COLOR if min_p else FAIL_COLOR)
                    colored_avg_meshes[i] = color_mesh(mesh, PASS_COLOR if avg_p else FAIL_COLOR)
                else:
                    room_min_pass[i], room_avg_pass[i], room_pass[i] = False, False, False
                    colored_min_meshes[i], colored_avg_meshes[i] = color_mesh(mesh, FAIL_COLOR), color_mesh(mesh, FAIL_COLOR)
            message = "[SUCCESS] BREEAM: Read {} inputs, found {} matches.".format(len(grid_names), matches)
        else: message = "[ERROR] No room data in JSON file."
    except Exception as e: message = "[ERROR] Failed to read JSON:\n" + str(e)
elif json_file_path: message = "[WARNING] JSON file not found at the given path."